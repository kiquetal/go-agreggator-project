// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feeds_follow.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteFeedFollow = `-- name: DeleteFeedFollow :one

DELETE FROM follows_feeds
WHERE id = $1
RETURNING id, created_at, updated_at, user_id, feed_id
`

func (q *Queries) DeleteFeedFollow(ctx context.Context, id uuid.UUID) (FollowsFeed, error) {
	row := q.db.QueryRowContext(ctx, deleteFeedFollow, id)
	var i FollowsFeed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getAllFeedFollowsByUser = `-- name: GetAllFeedFollowsByUser :many

SELECT f.id, f.created_at, f.updated_at, f.name, f.url, f.user_id
FROM feeds f
JOIN follows_feeds ff
ON f.id = ff.feed_id
WHERE ff.user_id = $1
`

func (q *Queries) GetAllFeedFollowsByUser(ctx context.Context, userID uuid.UUID) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeedFollowsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedFollows = `-- name: GetFeedFollows :many

SELECT ff.id, ff.created_at, ff.updated_at, ff.user_id, ff.feed_id
FROM follows_feeds ff
WHERE ff.user_id = $1
`

func (q *Queries) GetFeedFollows(ctx context.Context, userID uuid.UUID) ([]FollowsFeed, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FollowsFeed
	for rows.Next() {
		var i FollowsFeed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertFeedFollow = `-- name: InsertFeedFollow :one

INSERT INTO follows_feeds (id,user_id, feed_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type InsertFeedFollowParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) InsertFeedFollow(ctx context.Context, arg InsertFeedFollowParams) (FollowsFeed, error) {
	row := q.db.QueryRowContext(ctx, insertFeedFollow,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FollowsFeed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}
